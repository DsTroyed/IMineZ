package me.dancingwalrus.IMineZ;

import java.io.File;
import java.util.logging.Logger;
import org.bukkit.ChatColor;
import org.bukkit.GameMode;
import org.bukkit.Server;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.FileConfigurationOptions;
import org.bukkit.entity.Player;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;

public class Main extends JavaPlugin
{
  public Logger logger = Logger.getLogger("Minecraft");
  public PlayerListener playerListener = new PlayerListener(this);
  public EntityListener entityListener = new EntityListener(this);
  public VisibilityCheck vcheck = new VisibilityCheck(this);

  public void onDisable() {
    getServer().getScheduler().cancelAllTasks();
  }

  public void onEnable() {
    String pluginFolder = getDataFolder().getAbsolutePath();
    new File(pluginFolder).mkdirs();

    getConfig().options().copyDefaults(true);
    saveConfig();

    PluginManager pluginManager = getServer().getPluginManager();
    pluginManager.registerEvents(this.playerListener, this);
    pluginManager.registerEvents(this.entityListener, this);

    if (getConfig().getBoolean("visibility.enabled")) {
      this.logger.info("[IMineZ] Visibility is enabled");
      getServer().getScheduler().scheduleAsyncRepeatingTask(this, new Runnable() {
        public void run() {
          Player[] players = IMineZ.this.getServer().getOnlinePlayers();
          for (Player player : players) {
            float v = 4.0F;
            if (IMineZ.this.getConfig().getBoolean("visibility.watch.movement")) {
              v += IMineZ.this.vcheck.checkMovement(player);
            }
            if (IMineZ.this.getConfig().getBoolean("visibility.watch.surroundings")) {
              v += IMineZ.this.vcheck.checkSurroundings(player);
            }
            if (IMineZ.this.getConfig().getBoolean("visibility.watch.health.watch")) {
              v += IMineZ.this.vcheck.checkHealth(player);
            }
            if (IMineZ.this.getConfig().getBoolean("visibility.watch.weather")) {
              v += IMineZ.this.vcheck.checkWeather(player);
            }
            if (IMineZ.this.getConfig().getBoolean("visibility.watch.biome.watch")) {
              v += IMineZ.this.vcheck.checkBiome(player);
            }
            player.setExp(v / 8.0F);
          }
        }
      }
      , 40L, getConfig().getLong("visibility.checkticks"));
    } else {
      this.logger.info("[IMineZ] Using MineZ spawn mode.");
    }
    if (getConfig().getBoolean("thirst.enabled")) {
      this.logger.info("[IMineZ] Thirst is enabled.");
      getServer().getScheduler().scheduleAsyncRepeatingTask(this, new Runnable() {
        public void run() {
          Player[] players = IMineZ.this.getServer().getOnlinePlayers();
          for (Player player : players)
            if ((player.getGameMode() == GameMode.SURVIVAL) && 
              (player.getLevel() > 0)) {
              if (player.getLevel() == 2) {
                player.sendMessage(ChatColor.YELLOW + IMineZ.this.getConfig().getString("thirst.messages.dehydrated"));
              }
              if (player.getLevel() == 6) {
                player.sendMessage(ChatColor.YELLOW + IMineZ.this.getConfig().getString("thirst.messages.parched"));
              }
              if (player.getLevel() == 11) {
                player.sendMessage(ChatColor.YELLOW + IMineZ.this.getConfig().getString("thirst.messages.thirsty"));
              }
              player.setLevel(player.getLevel() - 1);
            }
        }
      }
      , 40L, getConfig().getLong("thirst.depletion") * 20L);

      getServer().getScheduler().scheduleAsyncRepeatingTask(this, new Runnable() {
        public void run() {
          Player[] players = IMineZ.this.getServer().getOnlinePlayers();
          for (Player player : players)
            if (player.getLevel() == 0)
              player.damage(1);
        }
      }
      , 40L, getConfig().getLong("thirst.damageticks"));
    }
  }
}
