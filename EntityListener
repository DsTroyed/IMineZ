package me.dancingwalrus.IMineZ;

import java.util.List;
import java.util.Random;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityCombustByBlockEvent;
import org.bukkit.event.entity.EntityCombustByEntityEvent;
import org.bukkit.event.entity.EntityCombustEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

public class EntityListener
  implements Listener
{
  private IMineZ plugin;
  Random random = new Random();

  public EntityListener(IMineZ instance) {
    this.plugin = instance;
  }
  @EventHandler(priority=EventPriority.NORMAL)
  public void onEntityDeath(EntityDeathEvent event) {
    if ((this.plugin.getConfig().getBoolean("thirst.enabled")) || (this.plugin.getConfig().getBoolean("visibility.enabled")))
      event.setDroppedExp(0);
  }

  @EventHandler(priority=EventPriority.NORMAL)
  public void onTrack(EntityTargetLivingEntityEvent event) {
    if ((event.getTarget() instanceof Player)) {
      Player player = (Player)event.getTarget();
      Double distance = Double.valueOf(event.getEntity().getLocation().distance(player.getLocation()));
      if ((distance.doubleValue() >= this.plugin.getConfig().getDouble("visibility.range.low")) && 
        (player.getExp() <= 0.25D)) {
        event.setCancelled(true);
        return;
      }

      if ((distance.doubleValue() >= this.plugin.getConfig().getDouble("visibility.range.medium")) && 
        (player.getExp() <= 0.65D)) {
        event.setCancelled(true);
        return;
      }
    }
  }

  @EventHandler(priority=EventPriority.NORMAL)
  public void onDamage(EntityDamageByEntityEvent event) {
    if (event.getDamager().getType() == EntityType.ZOMBIE)
    {
      Entity victim = event.getEntity();

      double c = this.random.nextDouble();
      c = this.random.nextDouble();
      if (c <= this.plugin.getConfig().getDouble("zombie.bite.chance") / 100.0D) {
        if (this.plugin.getConfig().getInt("zombie.bite.poison") != 0) {
          int duration = this.plugin.getConfig().getInt("zombie.bite.poison") * 20;
          PotionEffect effect = new PotionEffect(PotionEffectType.POISON, duration, 1);
          effect.apply((LivingEntity)victim);
        }
        if (this.plugin.getConfig().getInt("zombie.bite.hunger") != 0) {
          int duration = this.plugin.getConfig().getInt("zombie.bite.hunger") * 20;
          PotionEffect effect = new PotionEffect(PotionEffectType.HUNGER, duration, 1);
          effect.apply((LivingEntity)victim);
        }
        if (this.plugin.getConfig().getInt("zombie.bite.confusion") != 0) {
          int duration = this.plugin.getConfig().getInt("zombie.bite.confusion") * 20;
          PotionEffect effect = new PotionEffect(PotionEffectType.CONFUSION, duration, 1);
          effect.apply((LivingEntity)victim);
        }
        if (this.plugin.getConfig().getInt("zombie.bite.blindness") != 0) {
          int duration = this.plugin.getConfig().getInt("zombie.bite.blindness") * 20;
          PotionEffect effect = new PotionEffect(PotionEffectType.BLINDNESS, duration, 1);
          effect.apply((LivingEntity)victim);
        }
        if (this.plugin.getConfig().getInt("zombie.bite.weakness") != 0) {
          int duration = this.plugin.getConfig().getInt("zombie.bite.weakness") * 20;
          PotionEffect effect = new PotionEffect(PotionEffectType.WEAKNESS, duration, 1);
          effect.apply((LivingEntity)victim);
        }
        if (this.plugin.getConfig().getInt("zombie.bite.slowness") != 0) {
          int duration = this.plugin.getConfig().getInt("zombie.bite.slowness") * 20;
          PotionEffect effect = new PotionEffect(PotionEffectType.SLOW, duration, 1);
          effect.apply((LivingEntity)victim);
        }
      }
    }
  }

  @EventHandler(priority=EventPriority.NORMAL)
  public void onCombust(EntityCombustEvent event) { if (this.plugin.getConfig().getBoolean("zombie.sunproof"))
      event.setCancelled(true);
    else;
  }

  @EventHandler(priority=EventPriority.HIGH)
  public void onCombustBlock(EntityCombustByBlockEvent event)
  {
    event.setCancelled(false);
  }
  @EventHandler(priority=EventPriority.HIGH)
  public void onCombustEntity(EntityCombustByEntityEvent event) {
    event.setCancelled(false);
  }

  @EventHandler(priority=EventPriority.NORMAL)
  public void onCreatureSpawn(CreatureSpawnEvent event) {
    if (event.getEntityType() == EntityType.ZOMBIE)
    {
      int duration = this.plugin.getConfig().getInt("zombie.spawns.duration") * 1200;
      double c = this.random.nextDouble();
      c = this.random.nextDouble();
      if (c <= this.plugin.getConfig().getDouble("zombie.spawns.abilities.resistance") / 100.0D) {
        PotionEffect effect = new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, duration, 2);
        effect.apply(event.getEntity());
      }
      if (c <= this.plugin.getConfig().getDouble("zombie.spawns.abilities.fireresistance") / 100.0D) {
        PotionEffect effect = new PotionEffect(PotionEffectType.FIRE_RESISTANCE, duration, 2);
        effect.apply(event.getEntity());
      }
      c = this.random.nextDouble();
      if (c <= this.plugin.getConfig().getDouble("zombie.spawns.abilities.strength") / 100.0D) {
        PotionEffect effect = new PotionEffect(PotionEffectType.INCREASE_DAMAGE, duration, 2);
        effect.apply(event.getEntity());
      }
      c = this.random.nextDouble();
      if (c <= this.plugin.getConfig().getDouble("zombie.spawns.abilities.waterbreathing") / 100.0D) {
        PotionEffect effect = new PotionEffect(PotionEffectType.WATER_BREATHING, duration, 2);
        effect.apply(event.getEntity());
      }
      event.setCancelled(false);
      return;
    }
    if (blocked(event.getEntityType())) {
      event.setCancelled(true);
      return;
    }
    if (override(event.getEntityType())) {
      int i = 1;
      while (i <= this.plugin.getConfig().getInt("zombie.spawns.onoverride")) {
        if (event.getEntityType() != EntityType.SQUID)
        {
          event.getLocation().getWorld().spawnCreature(event.getLocation(), EntityType.ZOMBIE);
        }

        i++;
      }
      event.setCancelled(true);
      return;
    }
  }

  public boolean override(EntityType type) {
    List mobs = this.plugin.getConfig().getStringList("zombie.spawns.overrides");
    if (mobs.contains("ALL")) {
      return true;
    }
    for (String s : mobs) {
      if (type.toString().equalsIgnoreCase(s.toLowerCase())) {
        return true;
      }
    }
    return false;
  }
  public boolean blocked(EntityType type) {
    List mobs = this.plugin.getConfig().getStringList("block");
    if (mobs.contains("ALL")) {
      return true;
    }
    for (String s : mobs) {
      if (type.toString().equalsIgnoreCase(s.toLowerCase())) {
        return true;
      }
    }
    return false;
  }
}
